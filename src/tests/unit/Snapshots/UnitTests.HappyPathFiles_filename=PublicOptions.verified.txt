#nullable enable
using static Seekatar.Mask;
namespace Seekatar.OptionToStringGenerator
{
    public static partial class ClassExtensions
    {
        public static string OptionsToString(this Test.PublicOptions o)
        {
            return $@"Test.PublicOptions:
  PlainText                     : {Format(o?.PlainText)}
  Why                           : {Format(o?.Why)}
  PlainInt                      : {Format(o?.PlainInt)}
  PlainDouble                   : {Format(o?.PlainDouble)}
  PlainDecimal                  : {Format(o?.PlainDecimal)}
  PlainDateTime                 : {Format(o?.PlainDateTime)}
  PlainDatOnly                  : {Format(o?.PlainDatOnly)}
  PlainTimeOnly                 : {Format(o?.PlainTimeOnly)}
  TimeSpan                      : {Format(o?.TimeSpan)}
  UUID                          : {Format(o?.UUID)}
  NullItem                      : {Format(o?.NullItem)}
  AnObject                      : {Format(o?.AnObject)}
  AMaskedObject                 : {Format(o?.AMaskedObject,regex:"AClass\\:\\s+(.*)")}
  FullyMasked                   : {Format(o?.FullyMasked,prefixLen:0,suffixLen:0)}
  FirstThreeNotMasked           : {Format(o?.FirstThreeNotMasked,prefixLen:3,suffixLen:0)}
  LastThreeNotMasked            : {Format(o?.LastThreeNotMasked,prefixLen:0,suffixLen:3)}
  FirstAndLastThreeNotMasked    : {Format(o?.FirstAndLastThreeNotMasked,prefixLen:3,suffixLen:3)}
  NotMaskedSinceLongLength      : {Format(o?.NotMaskedSinceLongLength,prefixLen:100,suffixLen:0)}
  LengthOnly                    : {Format(o?.LengthOnly,lengthOnly:true)}
  MaskUserAndPassword           : {Format(o?.MaskUserAndPassword,regex:"User Id=([^;]+).*Password=([^;]+)")}
  MaskUserAndPasswordIgnoreCase : {Format(o?.MaskUserAndPasswordIgnoreCase,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)}
  RegexNotMatched               : {Format(o?.RegexNotMatched,regex:"User Id=([^;]+).*Password=([^;]+)")}
  Color                         : {Format(o?.Color)}
";
        }
        public static string OptionsToString(this Test.PublicOptionsSorted o)
        {
            return $@"Test.PublicOptionsSorted:
  AMaskedObject                 : {Format(o?.AMaskedObject,regex:"AClass\\:\\s+(.*)")}
  AnObject                      : {Format(o?.AnObject)}
  cLittleC                      : {Format(o?.cLittleC)}
  Color                         : {Format(o?.Color)}
  FirstAndLastThreeNotMasked    : {Format(o?.FirstAndLastThreeNotMasked,prefixLen:3,suffixLen:3)}
  FirstThreeNotMasked           : {Format(o?.FirstThreeNotMasked,prefixLen:3,suffixLen:0)}
  FullyMasked                   : {Format(o?.FullyMasked,prefixLen:0,suffixLen:0)}
  LastThreeNotMasked            : {Format(o?.LastThreeNotMasked,prefixLen:0,suffixLen:3)}
  LengthOnly                    : {Format(o?.LengthOnly,lengthOnly:true)}
  MaskUserAndPassword           : {Format(o?.MaskUserAndPassword,regex:"User Id=([^;]+).*Password=([^;]+)")}
  MaskUserAndPasswordIgnoreCase : {Format(o?.MaskUserAndPasswordIgnoreCase,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)}
  NotMaskedSinceLongLength      : {Format(o?.NotMaskedSinceLongLength,prefixLen:100,suffixLen:0)}
  NullItem                      : {Format(o?.NullItem)}
  PlainDateTime                 : {Format(o?.PlainDateTime)}
  PlainDatOnly                  : {Format(o?.PlainDatOnly)}
  PlainDecimal                  : {Format(o?.PlainDecimal)}
  PlainDouble                   : {Format(o?.PlainDouble)}
  PlainInt                      : {Format(o?.PlainInt)}
  PlainText                     : {Format(o?.PlainText)}
  PlainTimeOnly                 : {Format(o?.PlainTimeOnly)}
  RegexNotMatched               : {Format(o?.RegexNotMatched,regex:"User Id=([^;]+).*Password=([^;]+)")}
  TimeSpan                      : {Format(o?.TimeSpan)}
  UUID                          : {Format(o?.UUID)}
  Why                           : {Format(o?.Why)}
";
        }
    }
}

#nullable enable
using static Seekatar.Mask;
namespace Seekatar.OptionToStringGenerator
{
    public static partial class ClassExtensions
    {
        public static string OptionsToString(this Test.PropertyPublicOptions? o, string extraIndent = "", string titleSuffix = "")
        {
            return $@"Test.PropertyPublicOptions{titleSuffix}:
{extraIndent}  PlainText                     : {Format(o?.PlainText)}
{extraIndent}  Why                           : {Format(o?.Why)}
{extraIndent}  PlainInt                      : {Format(o?.PlainInt)}
{extraIndent}  PlainDouble                   : {Format(o?.PlainDouble)}
{extraIndent}  PlainDecimal                  : {Format(o?.PlainDecimal)}
{extraIndent}  PlainDateTime                 : {Format(o?.PlainDateTime)}
{extraIndent}  PlainDatOnly                  : {Format(o?.PlainDatOnly)}
{extraIndent}  PlainTimeOnly                 : {Format(o?.PlainTimeOnly)}
{extraIndent}  TimeSpan                      : {Format(o?.TimeSpan)}
{extraIndent}  UUID                          : {Format(o?.UUID)}
{extraIndent}  NullItem                      : {Format(o?.NullItem)}
{extraIndent}  AnObject                      : {Format(o?.AnObject)}
{extraIndent}  AMaskedObject                 : {Format(o?.AMaskedObject,regex:"AClass\\:\\s+(.*)")}
{extraIndent}  FullyMasked                   : {Format(o?.FullyMasked,prefixLen:0,suffixLen:0)}
{extraIndent}  FirstThreeNotMasked           : {Format(o?.FirstThreeNotMasked,prefixLen:3,suffixLen:0)}
{extraIndent}  LastThreeNotMasked            : {Format(o?.LastThreeNotMasked,prefixLen:0,suffixLen:3)}
{extraIndent}  FirstAndLastThreeNotMasked    : {Format(o?.FirstAndLastThreeNotMasked,prefixLen:3,suffixLen:3)}
{extraIndent}  NotMaskedSinceLongLength      : {Format(o?.NotMaskedSinceLongLength,prefixLen:100,suffixLen:0)}
{extraIndent}  LengthOnly                    : {Format(o?.LengthOnly,lengthOnly:true)}
{extraIndent}  MaskUserAndPassword           : {Format(o?.MaskUserAndPassword,regex:"User Id=([^;]+).*Password=([^;]+)")}
{extraIndent}  MaskUserAndPasswordIgnoreCase : {Format(o?.MaskUserAndPasswordIgnoreCase,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)}
{extraIndent}  RegexNotMatched               : {Format(o?.RegexNotMatched,regex:"User Id=([^;]+).*Password=([^;]+)")}
{extraIndent}  Color                         : {Format(o?.Color)}
";
        }
        public static string OptionsToString(this Test.PropertyPublicOptionsSorted? o, string extraIndent = "", string titleSuffix = "")
        {
            return $@"Test.PropertyPublicOptionsSorted{titleSuffix}:
{extraIndent}  AMaskedObject                 : {Format(o?.AMaskedObject,regex:"AClass\\:\\s+(.*)")}
{extraIndent}  AnObject                      : {Format(o?.AnObject)}
{extraIndent}  Color                         : {Format(o?.Color)}
{extraIndent}  FirstAndLastThreeNotMasked    : {Format(o?.FirstAndLastThreeNotMasked,prefixLen:3,suffixLen:3)}
{extraIndent}  FirstThreeNotMasked           : {Format(o?.FirstThreeNotMasked,prefixLen:3,suffixLen:0)}
{extraIndent}  FullyMasked                   : {Format(o?.FullyMasked,prefixLen:0,suffixLen:0)}
{extraIndent}  LastThreeNotMasked            : {Format(o?.LastThreeNotMasked,prefixLen:0,suffixLen:3)}
{extraIndent}  LengthOnly                    : {Format(o?.LengthOnly,lengthOnly:true)}
{extraIndent}  MaskUserAndPassword           : {Format(o?.MaskUserAndPassword,regex:"User Id=([^;]+).*Password=([^;]+)")}
{extraIndent}  MaskUserAndPasswordIgnoreCase : {Format(o?.MaskUserAndPasswordIgnoreCase,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)}
{extraIndent}  NotMaskedSinceLongLength      : {Format(o?.NotMaskedSinceLongLength,prefixLen:100,suffixLen:0)}
{extraIndent}  NullItem                      : {Format(o?.NullItem)}
{extraIndent}  PlainDateTime                 : {Format(o?.PlainDateTime)}
{extraIndent}  PlainDatOnly                  : {Format(o?.PlainDatOnly)}
{extraIndent}  PlainDecimal                  : {Format(o?.PlainDecimal)}
{extraIndent}  PlainDouble                   : {Format(o?.PlainDouble)}
{extraIndent}  PlainInt                      : {Format(o?.PlainInt)}
{extraIndent}  PlainText                     : {Format(o?.PlainText)}
{extraIndent}  PlainTimeOnly                 : {Format(o?.PlainTimeOnly)}
{extraIndent}  RegexNotMatched               : {Format(o?.RegexNotMatched,regex:"User Id=([^;]+).*Password=([^;]+)")}
{extraIndent}  TimeSpan                      : {Format(o?.TimeSpan)}
{extraIndent}  UUID                          : {Format(o?.UUID)}
{extraIndent}  Why                           : {Format(o?.Why)}
";
        }
    }
}

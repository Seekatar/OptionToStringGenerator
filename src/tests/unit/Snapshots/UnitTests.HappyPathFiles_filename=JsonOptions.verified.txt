#nullable enable
using static Seekatar.Mask;
namespace Seekatar.OptionToStringGenerator
{
    public static partial class ClassExtensions
    {
        internal static string OptionsToString(this Test.JsonOptions? o, string extraIndent = "")
        {
            return $@"{{
  ""Test.JsonOptions"" : {{
{extraIndent}  ""Name""                     : {Format(o?.Name,asJson:true)},
{extraIndent}  ""Why""                      : {Format(o?.Why,asJson:true)},
{extraIndent}  ""PlainInt""                 : {Format(o?.PlainInt,asJson:true)},
{extraIndent}  ""PlainDouble""              : {Format(o?.PlainDouble,asJson:true)},
{extraIndent}  ""PlainDecimal""             : {Format(o?.PlainDecimal,asJson:true)},
{extraIndent}  ""PlainDateTime""            : {Format(o?.PlainDateTime,asJson:true)},
{extraIndent}  ""PlainDatOnly""             : {Format(o?.PlainDatOnly,asJson:true)},
{extraIndent}  ""PlainTimeOnly""            : {Format(o?.PlainTimeOnly,asJson:true)},
{extraIndent}  ""TimeSpan""                 : {Format(o?.TimeSpan,asJson:true)},
{extraIndent}  ""UUID""                     : {Format(o?.UUID,asJson:true)},
{extraIndent}  ""NullName""                 : {Format(o?.NullName,asJson:true)},
{extraIndent}  ""YesNo""                    : {Format(o?.YesNo,asJson:true)},
{extraIndent}  ""Password""                 : {Format(o?.Password,asJson:true,prefixLen:0,suffixLen:0)},
{extraIndent}  ""Certificate""              : {Format(o?.Certificate,asJson:true,prefixLen:3,suffixLen:0)},
{extraIndent}  ""CertificateShort""         : {Format(o?.CertificateShort,asJson:true,prefixLen:30,suffixLen:0)},
{extraIndent}  ""Secret""                   : {Format(o?.Secret,asJson:true,lengthOnly:true)},
{extraIndent}  ""ConnectionString""         : {Format(o?.ConnectionString,asJson:true,regex:"User Id=([^;]+).*Password=([^;]+)")},
{extraIndent}  ""AnotherConnectionString""  : {Format(o?.AnotherConnectionString,asJson:true,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)},
{extraIndent}  ""AnEum""                    : {Format(o?.AnEum,asJson:true)},
{extraIndent}  ""SpecialCharacters""        : {Format(o?.SpecialCharacters,asJson:true)},
{extraIndent}  ""NoMiddle""                 : {Format(o?.NoMiddle,asJson:true,prefixLen:3,suffixLen:3)},
{extraIndent}  ""RegexNoMatch""             : {Format(o?.RegexNoMatch,asJson:true,regex:"User Id=([^;]+).*Password=([^;]+)",ignoreCase:true)}
  }}
}}";
        }
    }
}

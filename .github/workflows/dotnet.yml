# run build, tests, pack, and if on releases/* branch, publish to nuget.org
name: OptionToStringGenerator

on:
  push:
    branches: [ main, build, releases/** ]
    paths:
      - "src/**"
  pull_request:
    branches: [ main, releases/** ]
    paths:
      - "src/**"
  # workflow_dispatch: allows manually kicking off a build
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  buildAndDeploy:

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      max-parallel: 3
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3.6.0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x

    - name: Create GitHub NuGet Source
      run: |
       dotnet nuget add source --username $env:GITHUB_REPOSITORY_OWNER --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/$($env:GITHUB_REPOSITORY_OWNER.ToLower())/index.json"

    - name: Dump Environment
      run: |
       "::group::Pwsh Version"
       $PSVersionTable
       "::endgroup::"

       if (Get-Command "dotnet") {
           "::group::dotnet Version & SDKs"
           dotnet --version
           "::endgroup::"
           "::group::dotnet SDKs"
           dotnet --list-sdks
           "::endgroup::"
       }

       "::group::Environment Variables"
       Get-ChildItem env: | Select-Object key,value | Out-String -width 1000 | Sort-Object
       "::endgroup::"

    - name: Get version and release notes
      run: |
        $inVersion = $false
        $version = ''
        'releaseNotes<<EOF_EOF_EOF' | Out-File $env:GITHUB_ENV -Append -Encoding utf8
        $releaseNotes = ''
        foreach ( $line in (Get-Content .\CHANGELOG.md)) {
            if ($line -match '^## \[([\d\.]+)\]') {
                if ($inVersion) {break}
                $version = $Matches[1]
                $inVersion = $true;
            }
            if ($inVersion) {$releaseNotes += $line + "`n"}
        }
        $releaseNotes | Out-File $env:GITHUB_ENV -Append -Encoding utf8
        "EOF_EOF_EOF" | Out-File $env:GITHUB_ENV -Append -Encoding utf8

        if ($env:branch -ne 'refs/heads/main') {
            $version += '-prerelease'
        }
        "version=$version written to $env:GITHUB_ENV"
        "version=$version" | Out-File $env:GITHUB_ENV -Append -Encoding utf8
      id: releaseNotes
      env:
        branch: ${{ github.ref }}

    - name: Do CI Build and Test
      run: |
        ./run.ps1 createLocalNuget, build, testUnit, testIntegration, pack -Version $env:version
        "::group::Files"
        "Current directory is $PWD"
        gci ./ -r | select-object fullname | ft -wrap
        "::endgroup::"
      env:
       version: ${{ env.version }}

    # https://github.com/dorny/test-reporter/issues/149
    # permissions:
    #   id-token: write
    #   contents: read
    #   checks: write    # - name: Test Report
    #   uses: dorny/test-reporter@v1
    #   if: always()
    #   with:
    #     name: DotNET Tests
    #     path: "**/test-results.trx"
    #     reporter: dotnet-trx
    #     fail-on-error: true

    - name: Upload to CodeCov
      if: ${{ matrix.os == 'ubuntu-latest'}}
      shell: bash
      working-directory: src/tests/unit
      run: |
        export CODECOV_TOKEN="${{ secrets.CODECOV }}"
        bash <(curl -s https://codecov.io/bash)

    - name: Create a GitHub release
      if: startsWith(github.ref, 'refs/heads/main') && matrix.os == 'ubuntu-latest'
      run: |
        "Creating release $env:version"
        "Creating notes $env:releaseNotes"
        gh release create $env:version --title $env:version --notes $env:releaseNotes CHANGELOG.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        version: ${{ env.version }}
        releaseNotes: ${{ env.releaseNotes }}

    - name: Publish to NuGet.org
      if: startsWith(github.ref, 'refs/heads/main') && matrix.os == 'ubuntu-latest'
      run: |
       "Publishing ./packages/Seekatar.OptionToStringGenerator.$env:version.nupkg to Nuget.org"
       dotnet nuget push "./packages/Seekatar.OptionToStringGenerator.$env:version.nupkg" --api-key ${{ secrets.NUGET_ORG_PAT }} --source "https://api.nuget.org/v3/index.json"
      env:
       version: ${{ env.version }}
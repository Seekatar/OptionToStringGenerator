#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using static System.Console;
        internal static string OptionsToString(string h)
        {
            return $@"Test.InternalOptions:
  Name : {h}";
        }

WriteLine(">"+OptionsToString("Hello")+"<");

#!csharp

using System;
using static System.Console;
var dt = new DateTime();
var d = new DateOnly();
var t = new TimeOnly();

var dc = new Decimal();
var f = new Double();
dc = (int)1;


Console.WriteLine(Convert.ChangeType(1, typeof(int)));

#!csharp

#nullable enable
using static System.Console;

string Format(object o, bool lengthOnly = false, int prefixLen = -1, string? regex = null, bool ignoreCase = false)
{
    if ( o is null ) return "<null>";

    if (lengthOnly) return "Len = " + o.ToString().Length.ToString();

    if (prefixLen >= 0) {
        var s = o.ToString();
        if (prefixLen < s.Length) {
            return "\"" + s.Substring(0, prefixLen) + new string('*', s.Length - prefixLen) + "\"";
        } else {
            return "\"" + s + "\"";
        }
    }

    if (regex is not null) {
        var r = new System.Text.RegularExpressions.Regex(regex, ignoreCase ? System.Text.RegularExpressions.RegexOptions.IgnoreCase : System.Text.RegularExpressions.RegexOptions.None);
        var s = o.ToString();
        var m = r.Match(s);
        while (m.Success) {
            for ( int i = 1; i < m.Groups.Count; i++ ) {
                var cc = m.Groups[i].Captures;
                for ( int j = 0; j < cc.Count; j++ ) {
                    s = s.Replace(cc[j].ToString(), "***");
                }
            }
            m = m.NextMatch();
        }
        return s;
    }

    if (o is string)
        return "\"" + o + "\"";
    else
        return o.ToString();
}

WriteLine(Format("Hello"));
WriteLine(Format("Hello", prefixLen:0));
WriteLine(Format("Hello", prefixLen:2));
WriteLine(Format("Hello", prefixLen:10));
WriteLine(Format("Hello", prefixLen:4));
WriteLine(Format("Hello", prefixLen:5));
WriteLine(Format("Hello", prefixLen:6));
WriteLine(Format("Hello", lengthOnly:true));
WriteLine(Format(3));
WriteLine(Format(DateTime.Now));
WriteLine(Format(null));
WriteLine(Format("Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;", regex:"User Id=([^;]+).*Password=(.*)") );
WriteLine(Format("Server=myServerAddress;Database=myDataBase;user Id=myUsername;Password=myPassword;", regex:"User Id=([^;]+).*Password=(.*)") );
WriteLine(Format("Server=myServerAddress;Database=myDataBase;user Id=myUsername;Password=myPassword;", regex:"User Id=([^;]+).*Password=(.*)",ignoreCase:true) );
